{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","className","id","type","value","onChange","target","htmlFor","GifGridItem","title","url","header","src","alt","subTitle","style","width","getGifs","category","a","urlEndpoint","encodeURI","fetch","resp","json","data","gifs","map","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"0PAKaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAc9C,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,OAMd,0BAAMO,UAAU,iBACZ,kBAAC,YAAD,CACIC,GAAG,cACHC,KAAK,OACLC,MAAQX,EACRY,SAjBU,SAACT,GAAD,OAAOF,EAAeE,EAAEU,OAAOF,UAmB7C,2BAAOG,QAAQ,eAAf,a,sBCtBHC,EAAc,SAAC,GAAsB,EAApBN,GAAqB,IAAjBO,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAE/BC,EACF,yBAAKC,IAAMF,EAAMG,IAAMJ,IAG3B,OACI,kBAAC,OAAD,CACIK,SAAWL,EACXM,MAAO,CAACC,MAAO,SACff,UAAU,wDACVU,OAAQA,K,wBChBPM,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,4DACJ,2CACTC,EAFa,iDAE4CC,UAAUH,GAFtD,uBAGAI,MAAMF,EAFV,4CADI,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAK,gBAAGzB,EAAH,EAAGA,GAAIO,EAAP,EAAOA,MAAOmB,EAAd,EAAcA,OAAd,MAA4B,CAAE1B,KAAIO,QAAOC,IAAG,OAAEkB,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBnB,QAL3E,kBAOZgB,GAPY,4CAAH,sDCGPI,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACZ1B,mBAAS,CAC/BoC,OAAQ,GACRG,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAetC,OATAC,qBAAU,WACNjB,EAAQC,GAAUiB,MAAM,SAAAC,GACpBH,EAAS,CACLL,OAAQQ,EACRL,SAAS,SAGlB,CAACb,IAEGc,EDZqBK,CAAanB,GAAjCU,EAF6B,EAE7BA,OAAQG,EAFqB,EAErBA,QAEhB,OACI,oCACI,4BAAMb,GAEJa,GAAW,0CAEb,yBAAK9B,UAAU,aAEP2B,EAAOD,KAAK,SAAAW,GAAG,OAAK,kBAAC,EAAD,eAAaC,IAAMD,EAAIpC,IAAUoC,UEZ5DE,EAAe,WAAO,IAAD,EAEMhD,mBAAS,CAAC,YAFhB,mBAEvBQ,EAFuB,KAEXT,EAFW,KAI9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAAMS,EAAW2B,KAAK,SAAAT,GAAQ,OAAI,kBAAC,EAAD,CAASqB,IAAMrB,EAAWA,SAAWA,UCTnFuB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.e0ff8bc1.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\nimport { InputText } from 'primereact/inputtext';\n\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => setInputValue( e.target.value );\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories( categories => [inputValue, ...categories] );\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <span className=\"p-float-label\">\n                <InputText\n                    id=\"float-input\"\n                    type=\"text\"\n                    value={ inputValue }\n                    onChange={ handleInputChange }\n                />\n                <label htmlFor=\"float-input\">Search</label>\n            </span>\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","import 'primereact/resources/themes/nova-dark/theme.css';\nimport 'primereact/resources/primereact.css';\n\nimport React from 'react'\nimport { Card } from 'primereact/card';\n\nexport const GifGridItem = ({ id, title, url}) => {\n    \n    const header = (\n        <img src={ url } alt={ title }/>\n    );\n\n    return (\n        <Card\n            subTitle={ title }\n            style={{width: '360px'}}\n            className=\"ui-card-shadow card animate__animated animate__fadeIn\"\n            header={header}\n        />\n    )\n}\n","\nexport const getGifs = async(category) => {\n    const apiKey = 'api_key=aYPpDr6mlD6iJ4eZP3Wjil9K6B7N10jN';\n    const urlEndpoint = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&`;\n    const resp = await fetch(urlEndpoint + apiKey);\n    const { data } = await resp.json();\n    const gifs = data.map( ({ id, title, images }) => ({ id, title, url: images?.downsized_medium.url }))\n\n    return(gifs);\n}","import React from 'react'\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({ category }) => {\n\n    const { images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3>{ category }</h3>\n\n            { loading && <p>Loading ...</p> }\n\n            <div className=\"card-grid\">\n                {\n                    images.map( img => (<GifGridItem key={ img.id } { ...img } />))\n                }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        images: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then( imgs => {\n            setState({\n                images: imgs,\n                loading: false\n            });\n        })\n    }, [category])\n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    \n    const [categories, setCategories] = useState(['Friends']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr/>\n\n            <ol>{ categories.map( category => <GifGrid key={ category } category={ category } />) }</ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}